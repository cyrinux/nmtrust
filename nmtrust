#!/bin/bash

EXCLUDEFILE="/etc/nmtrust/excluded_networks"
TRUSTFILE="/etc/nmtrust/trusted_networks"

###############################################################################

usage() {
    echo "Usage: nmtrust [OPTION...]
Determine if the current NetworkManager connections are trusted.

Options:
    -e      specify an alternative location for the excluded networks file
    -t      specify an alternative location for the trusted networks file
    -q      be quiet
    -v      be verbose"
}

message() {
    if [ "$quiet" != true ]; then
        echo "$@"
    fi
}

file_check() {
    excludefile_dir=$(dirname "$EXCLUDEFILE")
    if [ ! -d "$excludefile_dir" ]; then
        if mkdir -p "$excludefile_dir"; then
            message "Created configuration directory: $excludefile_dir"
        else
            message "Failed to create configuration directory: $excludefile_dir"
            exit 1
        fi
    fi
    if [ ! -f "$EXCLUDEFILE" ]; then
        if touch $EXCLUDEFILE; then
            message "Created empty excluded networks file: $EXCLUDEFILE"
        else
            message "Failed to create excluded networks file: $EXCLUDEFILE"
            exit 1
        fi
    fi
    if [ ! -f "$TRUSTFILE" ]; then
        message "Could not locate trusted networks file: $TRUSTFILE"
        exit 1
    fi
}

check_connection() {
    local name=$1
    local connection_excluded=false
    mapfile -t excludes < <(grep -v '^#' < $EXCLUDEFILE)
    for exclude in "${excludes[@]}"; do
        if [[ "$name" == $exclude ]]; then
            connection_excluded=true
            break
        fi
    done
    echo $connection_excluded
}

list_connections() {
    mapfile -t nmcli < <(nmcli conn show --active)

    for (( i=0; i<${#nmcli[@]}; i++ )); do
    if [ "$i" -eq 0 ]; then
        echo "${nmcli[$i]}STATUS"
    else
        name=$(echo "${connections[$i-1]}" | awk -F ":" '{print $1}')
        uuid=$(echo "${connections[$i-1]}" | awk -F ":" '{print $2}')
        if grep -q "$uuid" "$TRUSTFILE"; then
        echo "${nmcli[$i]}trusted"
        elif [[ $(check_connection "$name") = true ]]; then
        echo "${nmcli[$i]}excluded"
        else
        echo "${nmcli[$i]}untrusted"
        fi
    fi
    done
}

trusted() {
    message "All connections are trusted"
    if [ "$verbose" == true ]; then
        echo
        list_connections
    fi
    exit 0
}

all_untrusted() {
    message "All connections are untrusted"
    if [ "$verbose" == true ]; then
        echo
        list_connections
    fi
    exit 2
}

untrusted() {
    message "${1-One or more} connections are untrusted"
    if [ "$verbose" == true ]; then
        echo
        list_connections
    fi
    exit 3
}

no_network() {
    message "There are no active connections"
    exit 4
}

while getopts ":e:t:q:vh" opt; do
    case $opt in
        e)
            EXCLUDEFILE=$OPTARG
            ;;
        t)
            TRUSTFILE=$OPTARG
            ;;
        q)
            quiet=true
            ;;
        v)
            verbose=true
            ;;
        :)
            echo "Option -$OPTARG requires an argument."
            usage
            exit 1
            ;;
        h | *)
            usage
            exit
            ;;
    esac
done

# Check if the excluded and trusted networks files exist.
file_check

# Get all active connections.
mapfile -t connections < <(nmcli --terse -f name,uuid conn show --active)

# Get number of active connections.
num_connections=0
for connection in "${connections[@]}"; do
    name=$(echo "$connection" | awk -F ":" '{print $1}')
    if [[ $(check_connection $name) = false ]]; then
        ((num_connections++))
    fi
done

# Get number of trusted connections.
num_trusted=$(comm -12 <(nmcli --terse -f uuid conn show --active | sort) <(sort "$TRUSTFILE") | wc -l)

# Determine if there are active connections.
if [ $num_connections -eq 0 ]; then
    no_network
# Check if any of the active connections are untrusted.
elif [[ $num_trusted -eq 0 ]]; then
    all_untrusted
else
    for connection in "${connections[@]}"; do
        name=$(echo "$connection" | awk -F ":" '{print $1}')
        uuid=$(echo "$connection" | awk -F ":" '{print $2}')
        if [[ $(check_connection $name) = false ]] && ! grep -q ^"$uuid"$ "$TRUSTFILE"; then
            num_untrusted=$((num_connections - num_trusted))
            untrusted "$num_untrusted of $num_connections"
        fi
    done
fi
# If we're still here, all connections are trusted.
trusted
